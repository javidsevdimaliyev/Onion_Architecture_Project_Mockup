<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BindError" xml:space="preserve">
    <value>Missing data error</value>
  </data>
  <data name="CannotBeMoreThanOneExecutor" xml:space="preserve">
    <value>There cannot be more than one executor</value>
  </data>
  <data name="CreditCardValidator" xml:space="preserve">
    <value>{PropertyName} is not a valid credit card number.</value>
  </data>
  <data name="DbException" xml:space="preserve">
    <value>Database exchange error</value>
  </data>
  <data name="DocumentTypeStagesNotDefined" xml:space="preserve">
    <value>Document type stages not defined</value>
  </data>
  <data name="DuplicateDataNotAllowed" xml:space="preserve">
    <value>Duplicate data cannot be added</value>
  </data>
  <data name="DuplicateKeyException" xml:space="preserve">
    <value>Duplicate key error</value>
  </data>
  <data name="EmailNotConfirmed" xml:space="preserve">
    <value>Email is not confirmed</value>
  </data>
  <data name="EmailValidator" xml:space="preserve">
    <value>{PropertyName} is not a valid email address.</value>
  </data>
  <data name="EqualValidator" xml:space="preserve">
    <value>{PropertyName} should be equal to {PropertyValue}</value>
  </data>
  <data name="Exception" xml:space="preserve">
    <value>An exception occured</value>
  </data>
  <data name="Failure" xml:space="preserve">
    <value>Unable to process the request.</value>
  </data>
  <data name="FieldsNotFound" xml:space="preserve">
    <value>Fields not found</value>
  </data>
  <data name="FileContentIsEmpty" xml:space="preserve">
    <value>File content is empty.</value>
  </data>
  <data name="FileExtension" xml:space="preserve">
    <value>The file type is incorrect</value>
  </data>
  <data name="FileNotFound" xml:space="preserve">
    <value>File not found</value>
  </data>
  <data name="FileNotSave" xml:space="preserve">
    <value>File not saved</value>
  </data>
  <data name="FileReadError" xml:space="preserve">
    <value>Error occured when read file</value>
  </data>
  <data name="GreaterThanValidator" xml:space="preserve">
    <value>{PropertyName} must be greater than {ComparisonValue}.</value>
  </data>
  <data name="IncorrectFormat" xml:space="preserve">
    <value>The information is not in the correct format</value>
  </data>
  <data name="InvalidOTPCode" xml:space="preserve">
    <value>OPT code is invalid</value>
  </data>
  <data name="InvalidPassword" xml:space="preserve">
    <value>Invalid password</value>
  </data>
  <data name="InvalidRepeatedPassword" xml:space="preserve">
    <value>Passwords entered do not match.</value>
  </data>
  <data name="LengthValidator" xml:space="preserve">
    <value>{PropertyName} must be between {MinLength} and {MaxLength} characters. You entered {TotalLength} characters.</value>
  </data>
  <data name="LessThanValidator" xml:space="preserve">
    <value>{PropertyName} must be less than {ComparisonValue}.</value>
  </data>
  <data name="LettersOnly" xml:space="preserve">
    <value>Must contain only alphabetic characters."</value>
  </data>
  <data name="LoadResultError" xml:space="preserve">
    <value>Search filters is wrong</value>
  </data>
  <data name="Locked" xml:space="preserve">
    <value>Profile is locked</value>
  </data>
  <data name="MainExecutorMustSelected" xml:space="preserve">
    <value>Main executor must be selected</value>
  </data>
  <data name="Max20Digit" xml:space="preserve">
    <value>Max 20 digit symbols allowed</value>
  </data>
  <data name="MaxLengthValidator" xml:space="preserve">
    <value>The length of {PropertyName} must be {MaxLength} characters or fewer.You entered {TotalLength} characters.</value>
  </data>
  <data name="MinLengthValidator" xml:space="preserve">
    <value>The length of {PropertyName} must be at least {MinLength} characters. You entered {TotalLength} characters.</value>
  </data>
  <data name="MissingParameter" xml:space="preserve">
    <value>No search or access parameter is included</value>
  </data>
  <data name="NoContent" xml:space="preserve">
    <value>No content</value>
  </data>
  <data name="NoDelete" xml:space="preserve">
    <value>You do not have permission to delete this information</value>
  </data>
  <data name="NotEmptyValidator" xml:space="preserve">
    <value>{PropertyName} should not be empty</value>
  </data>
  <data name="NotEqualValidator" xml:space="preserve">
    <value>{PropertyName} should not be equal to {PropertyValue}</value>
  </data>
  <data name="NotFound" xml:space="preserve">
    <value>URL not found</value>
  </data>
  <data name="NotNullValidator" xml:space="preserve">
    <value>{PropertyName} must not be empty.</value>
  </data>
  <data name="NotValid" xml:space="preserve">
    <value>Value is not valid</value>
  </data>
  <data name="ObjectMustBeNull" xml:space="preserve">
    <value>{0} must be empty.</value>
  </data>
  <data name="ObjectNotFound" xml:space="preserve">
    <value>Object not found</value>
  </data>
  <data name="OperationCancelled" xml:space="preserve">
    <value>The operation was cancelled.</value>
  </data>
  <data name="PasswordRequiresDigit" xml:space="preserve">
    <value>Passwords must have at least one digit ('0'-'9').</value>
  </data>
  <data name="PasswordRequiresLower" xml:space="preserve">
    <value>Passwords must have at least one lowercase ('a'-'z').</value>
  </data>
  <data name="PasswordRequiresNonAlphanumeric" xml:space="preserve">
    <value>Passwords must have at least one non alphanumeric character.</value>
  </data>
  <data name="PasswordRequiresUniqueChars" xml:space="preserve">
    <value>Passwords must use at least {0} different characters.</value>
  </data>
  <data name="PasswordRequiresUpper" xml:space="preserve">
    <value>Passwords must have at least one uppercase ('A'-'Z').</value>
  </data>
  <data name="PasswordTooShort" xml:space="preserve">
    <value>Passwords must be at least {0} characters.</value>
  </data>
  <data name="Permission" xml:space="preserve">
    <value>You do not have permission</value>
  </data>
  <data name="PermissionDenied" xml:space="preserve">
    <value>You do not have permission to perform this operation.</value>
  </data>
  <data name="PhoneNumberNotConfirmed" xml:space="preserve">
    <value>Phone number is not confirmed</value>
  </data>
  <data name="PropertyAlreadyExists" xml:space="preserve">
    <value>Value already exists</value>
  </data>
  <data name="PropertyIsNull" xml:space="preserve">
    <value>Value is empty</value>
  </data>
  <data name="RefreshTokenExpired" xml:space="preserve">
    <value>Refresh token expired</value>
  </data>
  <data name="RefreshTokenIsRevoked" xml:space="preserve">
    <value>Refresh token is revoked</value>
  </data>
  <data name="RefreshTokenIsUsed" xml:space="preserve">
    <value>Refresh token is used</value>
  </data>
  <data name="RefreshTokenNotFound" xml:space="preserve">
    <value>Refresh token not found</value>
  </data>
  <data name="RequiredAttribute" xml:space="preserve">
    <value>This cell is required</value>
  </data>
  <data name="RequireResetPassword" xml:space="preserve">
    <value>Require reset password</value>
  </data>
  <data name="ResetPasswordDoesNotRequired" xml:space="preserve">
    <value>Reset password does not required</value>
  </data>
  <data name="Success" xml:space="preserve">
    <value>Operation was successfull</value>
  </data>
  <data name="TwoFactorAuthenticationNotEnabled" xml:space="preserve">
    <value>Two factor authentication not enabled.</value>
  </data>
  <data name="Unauthorized" xml:space="preserve">
    <value>Unauthorized attempt</value>
  </data>
  <data name="UserAlreadyLoggedIn" xml:space="preserve">
    <value>User already logged in</value>
  </data>
  <data name="UserCertificateIsInvalid" xml:space="preserve">
    <value>User certificate is invalid.</value>
  </data>
  <data name="UserNotFound" xml:space="preserve">
    <value>User not found</value>
  </data>
  <data name="ValidationError" xml:space="preserve">
    <value>Validation error occured.</value>
  </data>
</root>